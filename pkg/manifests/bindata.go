// Code generated by go-bindata.
// sources:
// assets/tuned/01-service-account.yaml
// assets/tuned/02-cluster-role.yaml
// assets/tuned/03-cluster-role-binding.yaml
// assets/tuned/04-cm-tuned-profiles.yaml
// assets/tuned/05-cm-tuned-recommend.yaml
// assets/tuned/06-ds-tuned-rhel7.yaml
// assets/tuned/06-ds-tuned-rhel8.yaml
// assets/tuned/default-cr-tuned.yaml
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTuned01ServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc7\x31\x0e\x42\x31\x08\x06\xe0\xbd\xa7\xe0\x02\x1d\x5c\xd9\x3c\x83\x89\x3b\xa1\xbf\x4a\xf4\x41\x43\xe9\x3b\xbf\xcb\x1b\x3f\x99\xf6\x44\x2e\x0b\x67\x3a\x6f\xed\x6b\x3e\x98\x1e\xc8\xd3\x14\x77\xd5\xd8\x5e\xed\x40\xc9\x90\x12\x6e\x44\x2e\x07\x98\x6a\x3b\xc6\xa5\x35\x45\xc1\x14\x13\xbe\x3e\xf6\xaa\xae\xbf\xbd\x0a\xd9\x3d\x06\x7a\x6d\x37\x7f\xf7\x98\x48\xa9\xc8\xf6\x0f\x00\x00\xff\xff\x95\x01\xe5\x42\x70\x00\x00\x00")

func assetsTuned01ServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned01ServiceAccountYaml,
		"assets/tuned/01-service-account.yaml",
	)
}

func assetsTuned01ServiceAccountYaml() (*asset, error) {
	bytes, err := assetsTuned01ServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/01-service-account.yaml", size: 112, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned02ClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x3f\x4f\xc4\x30\x0c\xc5\xf7\x7c\x8a\x28\xf3\x5d\x11\x1b\xca\xca\xc0\xc6\xc0\xc0\x82\x3a\xf8\x12\xd3\x5a\xd7\xda\x91\xed\x94\x3f\x9f\x1e\x5d\x4f\x0c\x1c\x93\x25\xff\xde\x7b\x3f\x68\xf4\x8a\x6a\x24\x9c\xa3\x9e\xa0\x0c\xd0\x7d\x16\xa5\x6f\x70\x12\x1e\xce\x0f\x36\x90\xdc\x6d\xf7\xe1\x4c\x5c\x73\x7c\x5c\xba\x39\xea\x8b\x2c\x18\x56\x74\xa8\xe0\x90\x43\x8c\x0c\x2b\xe6\x58\xae\xf4\xc8\x52\xf1\xe8\x9d\x89\xa7\xec\x9d\xb1\x06\xed\x0b\x5a\x0e\xc7\x08\x8d\x9e\x54\x7a\xb3\x1c\xdf\x52\x1a\x43\x8c\x8a\x26\x5d\x0b\xee\x9f\x4b\xd3\xd2\x21\x35\xa9\xb6\xd3\x0d\xf5\xb4\x93\x09\x3d\x1d\xd2\x42\x76\x39\x1f\xe0\x65\x4e\xe3\xed\x9e\x61\xe9\x4a\xfe\x35\x48\x43\xb6\x99\xde\x7d\x20\xf9\x2f\xf9\x8d\x15\x61\xc7\x4f\x2f\xc2\xe6\x0a\xc4\x7e\xa3\xec\x86\x7f\xca\xcf\xb0\x5e\x07\x9a\xd2\x46\x0b\x4e\x58\xd3\x18\x7e\x02\x00\x00\xff\xff\x24\x0d\xec\x93\x42\x01\x00\x00")

func assetsTuned02ClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned02ClusterRoleYaml,
		"assets/tuned/02-cluster-role.yaml",
	)
}

func assetsTuned02ClusterRoleYaml() (*asset, error) {
	bytes, err := assetsTuned02ClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/02-cluster-role.yaml", size: 322, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned03ClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xb1\x4e\x03\x31\x0c\x86\xf7\x3c\x45\x5e\x20\x87\xd8\x90\x37\x60\x67\x28\x12\xbb\x9b\xb8\xad\xe9\x9d\x7d\xb2\x9d\x4a\xf0\xf4\xe8\x94\x8a\x05\x86\x1b\x2d\xfd\xdf\xf7\x19\x57\xfe\x20\x73\x56\x81\x6c\x47\xac\x13\xf6\xb8\xa8\xf1\x37\x06\xab\x4c\xd7\x27\x9f\x58\x1f\x6e\x8f\xe9\xca\xd2\x20\xbf\xce\xdd\x83\xec\xa0\x33\xbd\xb0\x34\x96\x73\x5a\x28\xb0\x61\x20\xa4\x9c\x05\x17\x82\x5c\xc7\xa8\x88\x36\x2a\xd1\x85\xe5\x0c\xd1\x85\x5a\x32\x9d\xe9\x40\xa7\x6d\xfa\xc7\xb7\x03\xf7\x7e\xfc\xa4\x1a\x0e\xa9\xdc\xf9\x77\xb2\x1b\x57\x7a\xae\x55\xbb\xc4\xaf\x62\xcc\xc7\xe5\x2b\x56\x82\xac\x2b\x89\x5f\xf8\x14\xe5\x1f\x7f\xd1\x95\x0c\x43\x2d\x75\x27\x7b\xdb\xa8\xad\xe1\x5f\x1e\xb4\x80\x8f\x08\x8e\x08\xec\x33\xdd\x5f\xfe\x09\x00\x00\xff\xff\x51\x4a\xd8\x71\x60\x01\x00\x00")

func assetsTuned03ClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned03ClusterRoleBindingYaml,
		"assets/tuned/03-cluster-role-binding.yaml",
	)
}

func assetsTuned03ClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsTuned03ClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/03-cluster-role-binding.yaml", size: 352, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned04CmTunedProfilesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xa1\x0e\xc2\x40\x0c\x06\x60\x7f\x4f\xd1\xcc\x57\x60\xcf\xa2\xb1\xf8\x66\xf7\x6f\x34\x6c\x6d\x73\xd7\xe3\xf9\x49\x08\x08\xec\x27\x3e\x09\xbd\xa3\x0f\x75\xab\xf4\xba\x94\xa7\x5a\xab\x74\x75\xdb\x74\xbf\x49\x94\x13\x29\x4d\x52\x6a\x21\x32\x39\x51\x29\xa7\xa1\x71\x74\xdf\xf4\xc0\xf8\xf2\x08\x59\x51\xc9\x03\x36\x1e\xba\x25\xaf\xc7\x1c\x89\xce\xe6\x0d\x9c\xd3\xd4\x76\xf6\x40\x97\xf4\x5e\x7e\xe1\x7f\xc5\x1f\xa6\x65\x29\xef\x00\x00\x00\xff\xff\x0a\xb4\xaa\xf4\x94\x00\x00\x00")

func assetsTuned04CmTunedProfilesYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned04CmTunedProfilesYaml,
		"assets/tuned/04-cm-tuned-profiles.yaml",
	)
}

func assetsTuned04CmTunedProfilesYaml() (*asset, error) {
	bytes, err := assetsTuned04CmTunedProfilesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/04-cm-tuned-profiles.yaml", size: 148, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned05CmTunedRecommendYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\xa1\xb2\x02\x31\x0c\x05\x50\xdf\xaf\xc8\xac\xaf\x78\x36\xf6\x69\x2c\x3e\xd3\xde\x5d\x32\xd0\x24\xd3\x66\xf9\x7e\x04\x30\xd8\x23\x8e\x84\x5e\x31\x97\xba\x31\x3d\xff\xca\x5d\xad\x33\xfd\xbb\xed\x7a\x5c\x24\xca\x40\x4a\x97\x14\x2e\x44\x26\x03\x4c\x79\x1a\x7a\x9d\x68\x3e\x06\xac\x7f\x7c\x85\x34\x30\x79\xc0\xd6\x4d\xf7\xac\xed\x71\xae\xc4\xac\xe6\x1d\x35\x4f\x53\x3b\xaa\x07\xa6\xa4\xcf\xf2\x1d\xdf\x97\xb7\xf8\x7d\x4c\xdb\x56\x5e\x01\x00\x00\xff\xff\x1b\xe2\xd5\x67\x95\x00\x00\x00")

func assetsTuned05CmTunedRecommendYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned05CmTunedRecommendYaml,
		"assets/tuned/05-cm-tuned-recommend.yaml",
	)
}

func assetsTuned05CmTunedRecommendYaml() (*asset, error) {
	bytes, err := assetsTuned05CmTunedRecommendYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/05-cm-tuned-recommend.yaml", size: 149, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned06DsTunedRhel7Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xdf\x8f\xe2\x36\x10\x7e\xe7\xaf\xb0\xf6\xfa\x1a\xc2\xb5\x6a\x4f\xca\xdb\x0a\xd8\xd3\x4a\x07\x8b\x96\xbd\x4a\x7d\x5a\x0d\xce\x00\x2e\xfe\x91\x7a\xc6\xb9\x45\xa7\xfe\xef\x95\x49\x02\x09\x01\x76\xd5\xbc\x80\xc6\x9f\x3f\xcf\x78\xbe\x99\x31\x14\xea\x4f\xf4\xa4\x9c\xcd\x04\x14\x05\xa5\xe5\xe7\xc1\x4e\xd9\x3c\x13\x13\x40\xe3\xec\x12\x79\x60\x90\x21\x07\x86\x6c\x20\x84\x05\x83\x99\xe0\x60\x31\x4f\xfc\x16\xf5\x97\xda\x46\x05\x48\xcc\x84\x2b\xd0\xd2\x56\xad\x39\x91\x3a\x10\xa3\x4f\xac\xcb\x31\xe1\x60\x95\xdd\x24\xae\x40\x0f\xec\xfc\x40\x08\x0d\x2b\xd4\x14\x19\x45\x6b\x13\x14\x45\x97\x9c\x0a\x94\x11\x44\xa8\x51\xb2\xf3\xd5\x06\x03\x2c\xb7\xdf\x5a\x0c\x37\x39\x84\x60\x34\x85\x06\xc6\x7a\x77\x2b\x9c\xf8\xe9\x0e\xd1\x3b\x54\x42\x34\x2e\x1d\xfe\xa3\x2f\x95\xc4\x7b\x29\x5d\xb0\x3c\x3f\xdd\x4d\xbd\x0e\x81\x9d\x89\x4b\xcb\x0e\xf0\xc5\xed\xd0\x66\x82\x7d\xc0\x1a\x28\x9d\x65\x50\x16\xfd\xd1\x8f\x44\x48\x67\x0c\xd8\xfc\xe4\x58\x22\xd2\x12\x7c\xaa\xd5\x2a\x3d\x1c\x92\xae\x94\x4d\x7d\xb0\x47\x80\x47\x72\xc1\x4b\x6c\x05\x13\x8d\xff\x04\x24\xee\xd8\x84\x90\x45\xc8\xc4\xe7\x91\xe9\x18\x0d\x1a\xe7\xf7\x99\xf8\x75\x34\x53\xc7\x05\x65\x60\x83\x99\xf8\xe5\xe7\xf8\xdb\xf7\xe5\xcb\xf4\xf9\x75\xfe\x34\x99\xbe\xbe\x7c\x9f\x4f\x27\xaf\x8f\xb3\xfb\xaf\xd3\x7f\xbb\xd0\x45\xd0\x7a\xe1\xb4\x92\xfb\x4c\x3c\xae\xe7\x8e\x17\x1e\x09\x2d\x1f\x51\xb6\x77\x4d\x6d\xcf\xc5\xcf\x13\x1f\xa1\x0c\x5e\xf1\x7e\xec\x2c\xe3\x1b\xb7\x23\x28\xbc\x2a\x95\xc6\x0d\xe6\x9d\x7b\x8c\xb9\xf6\x46\x59\x60\xe5\xec\x0c\x89\xa2\x43\xc0\xdb\x4c\xa4\x39\x96\x69\x6b\x31\xd1\x6e\x73\x6b\x53\x1d\xc1\x83\xd2\x27\xee\xd2\xe9\x60\x70\x16\x53\x48\xed\xb4\x1c\x52\x5c\x1f\x83\x2c\xeb\xec\x78\x8c\x19\x44\x9b\x0f\xf3\x96\xe3\x55\xf4\xc8\x32\xa9\x85\xd5\xa0\xae\xf0\x75\x33\x5e\x78\xb7\x56\x1a\x29\x89\x02\xee\xb1\x96\xe0\x13\xad\x56\x35\xf3\x65\x6c\x97\x9d\xf6\xd4\x63\x69\xdb\xfa\xbe\xf8\x60\xd3\x7c\x15\xfa\xdb\xe2\xe1\x3e\xd8\xe4\x6c\xd1\x23\xe4\x4f\x56\xef\xcf\xd2\xd4\x25\x8e\xa4\xb4\x27\x46\x93\xd7\xbf\x3d\xfa\x48\x5d\x43\x92\x1e\xe4\x43\x87\xc4\x5b\x34\x2e\x0f\x1a\xfb\xce\xc7\x5b\xeb\xaf\x5d\xa1\x45\x5b\xb6\xa5\x98\xd4\x1c\x4f\xe3\x45\x55\x1b\xf3\xfb\xd9\xb4\x53\x57\x25\xe8\x80\x0f\xde\x99\x6e\x0d\x0a\xb1\x56\xa8\xf3\x67\x5c\x9f\xdb\xeb\x95\xca\xf1\xd8\x70\x86\xb1\x8d\xc6\xfe\x72\xe1\xdc\xe7\xe9\xf2\xaf\xf9\xf8\x75\x31\x7d\x7e\x7c\x9a\xf4\xcf\xcd\xc4\xdd\x1f\xa3\xbb\xda\x5e\x29\xb8\xd5\x64\xb6\x8e\xaa\xfb\x69\xd7\x56\x5f\x1b\xe7\xca\xb8\xb9\xf1\xa2\x4c\xae\x8a\xe4\x26\xd5\x0d\x61\xbc\x23\x8b\x9b\xb4\x97\xa4\x70\x4d\x08\xb1\x11\xdb\xb5\xda\xcc\xa0\x68\x33\x29\x46\x43\x5d\x19\xec\x70\xdf\x8c\x0b\x27\x8b\x0b\x95\x7d\xf2\xe0\xf7\x51\x72\x1c\x33\xc3\xc8\xdf\x53\xe4\xb5\xee\x10\xe7\x53\xec\x53\xa0\xcf\x54\xf9\x5e\x63\xf9\x5f\x71\x5c\xeb\x37\x4d\x1c\x5d\xd4\x70\x0f\x46\x5f\x89\xa4\xc1\x7c\x34\x90\xf7\x7b\x59\x6e\xa9\xe9\xd2\xe3\xea\xb1\xf1\xa0\x3c\x35\x73\x26\x16\xcc\xb2\xf3\x6a\x88\xdf\x0a\x19\x86\xbb\xb0\x42\x6f\x91\x91\x86\xca\xa5\x8e\x62\xd6\x6d\x78\x1b\x7c\x6a\xfc\xa2\xc4\xc0\xdf\xce\x27\x65\xf3\x32\xba\xfb\xd2\x14\x50\xe1\x95\x3b\x8c\x24\x0d\x44\xd5\xc0\xbf\xab\x74\x57\xbd\x74\xa4\x57\xac\x24\xe8\x06\x1f\x45\x38\x47\xfe\xe1\xfc\xae\x13\xe6\x41\x9c\x8f\x93\x8e\xcd\x23\x31\x78\x6e\x82\xba\xd7\x3f\xe0\x58\x70\x24\xb7\x18\x55\xe9\xab\x33\x73\x5c\x43\xd0\x9c\x1c\xcd\xc7\x07\x49\x77\x62\x9e\xa6\x69\x6b\xc4\x7d\xf5\x20\x71\x81\x5e\xb9\x7c\x89\xd2\xd9\x9c\x32\xf1\xdb\xa8\xc1\x39\x1d\x1f\x69\xca\xd9\xa3\x2a\x3e\x35\x46\x14\xa0\xb5\x88\x0f\x15\x26\x41\x4e\xf0\x16\xb8\x4a\xaf\x50\x24\xe0\xe0\xaf\x28\xaa\x71\x2f\x9c\x3d\xa0\xe3\xad\x9c\x4a\xa9\x79\x01\x66\x62\xfa\xa6\x88\x69\xf0\x5f\x00\x00\x00\xff\xff\xc5\x27\xb5\x24\x80\x0a\x00\x00")

func assetsTuned06DsTunedRhel7YamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned06DsTunedRhel7Yaml,
		"assets/tuned/06-ds-tuned-rhel7.yaml",
	)
}

func assetsTuned06DsTunedRhel7Yaml() (*asset, error) {
	bytes, err := assetsTuned06DsTunedRhel7YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/06-ds-tuned-rhel7.yaml", size: 2688, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned06DsTunedRhel8Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4b\x8f\xe2\x46\x10\xbe\xf3\x2b\x5a\x93\x5c\x8d\xd9\x44\x89\x56\xbe\x8d\x80\x59\x8d\xb4\x30\x68\x98\x8d\x94\xd3\xa8\x68\x17\xd0\xa1\x1f\x4e\x57\xb5\x77\xd0\x2a\xff\x3d\x6a\x6c\x83\x8d\x81\x19\xad\x2f\xa0\xea\xea\xaf\xeb\xf1\xd5\x03\x0a\xf5\x17\x7a\x52\xce\x66\x02\x8a\x82\xd2\xf2\xd3\x60\xa7\x6c\x9e\x89\x09\xa0\x71\x76\x89\x3c\x30\xc8\x90\x03\x43\x36\x10\xc2\x82\xc1\x4c\x70\xb0\x98\x27\x7e\x8b\xfa\x73\x2d\xa3\x02\x24\x66\xc2\x15\x68\x69\xab\xd6\x9c\x48\x1d\x88\xd1\x27\xd6\xe5\x98\x70\xb0\xca\x6e\x12\x57\xa0\x07\x76\x7e\x20\x84\x86\x15\x6a\x8a\x88\xa2\x75\x09\x8a\xa2\x0b\x4e\x05\xca\xa8\x44\xa8\x51\xb2\xf3\xd5\x05\x03\x2c\xb7\x5f\x5b\x08\x37\x31\x84\x60\x34\x85\x06\xc6\xfa\x76\xcb\x9d\xf8\xe9\x0e\xd0\x3b\x50\x42\x34\x26\x1d\xfe\xa3\x2f\x95\xc4\x7b\x29\x5d\xb0\x3c\x3f\xc5\xa6\x3e\x87\xc0\xce\xc4\xa3\x65\x47\xf1\xc5\xed\xd0\x66\x82\x7d\xc0\x5a\x51\x3a\xcb\xa0\x2c\xfa\xa3\x1d\x89\x90\xce\x18\xb0\xf9\xc9\xb0\x44\xa4\x25\xf8\x54\xab\x55\x7a\x78\x24\x5d\x29\x9b\xfa\x60\x8f\x0a\x1e\xc9\x05\x2f\xb1\xe5\x4c\x14\xfe\x1b\x90\xb8\x23\x13\x42\x16\x21\x13\x9f\x46\xa6\x23\x34\x68\x9c\xdf\x67\xe2\xb7\xd1\x4c\x1d\x0f\x94\x81\x0d\x66\xe2\xd7\x1f\xe3\xaf\xdf\x96\x2f\xd3\xe7\xd7\xf9\xd3\x64\xfa\xfa\xf2\x6d\x3e\x9d\xbc\x3e\xce\xee\xbf\x4c\xff\xeb\xaa\x2e\x82\xd6\x0b\xa7\x95\xdc\x67\xe2\x71\x3d\x77\xbc\xf0\x48\x68\xf9\xa8\x65\x7b\x61\x6a\x5b\x2e\x7e\x9c\xf0\x08\x65\xf0\x8a\xf7\x63\x67\x19\xdf\xb8\xed\x41\xe1\x55\xa9\x34\x6e\x30\xef\xc4\x31\xe6\xda\x1b\x65\x81\x95\xb3\x33\x24\x8a\x06\x01\x6f\x33\x91\xe6\x58\xa6\xad\xc3\x44\xbb\xcd\xad\x4b\xb5\x07\x0f\x4a\x9f\xb0\x4b\xa7\x83\xc1\x59\x4c\x21\xb5\xd3\x72\x48\x71\xfd\x0c\xb2\xac\xb3\xe3\x31\x66\x10\x6d\x3e\xcc\x5b\x86\x57\xde\x23\xcb\xa4\x26\x56\xa3\x75\x05\xaf\x9b\xf1\xc2\xbb\xb5\xd2\x48\x49\x24\x70\x0f\xb5\x04\x9f\x68\xb5\xaa\x91\x2f\xeb\x76\xd1\x69\x4f\x3d\x94\xb6\xac\x6f\x8b\x0f\x36\xcd\x57\xa1\x7f\x2d\x3e\xee\x83\x4d\xce\x0e\x3d\x42\xfe\x64\xf5\xfe\x2c\x4d\x5d\xe0\x08\x4a\x7b\x62\x34\x79\xfd\xdb\x83\x8f\xd0\xb5\x4a\xd2\x53\xf9\xd0\x23\x31\x8a\xc6\xe5\x41\x63\xdf\xf8\x18\xb5\xfe\xd9\x15\x58\xb4\x65\x9b\x8a\x49\x8d\xf1\x34\x5e\x54\xb5\x31\xbf\x9f\x4d\x3b\x75\x55\x82\x0e\xf8\xe0\x9d\xe9\xd6\xa0\x10\x6b\x85\x3a\x7f\xc6\xf5\xb9\xbc\x3e\xa9\x0c\x8f\x0d\x67\x18\xdb\x68\xec\x2f\x17\xde\x7d\x9e\x2e\xff\x9e\x8f\x5f\x17\xd3\xe7\xc7\xa7\x49\xff\xdd\x4c\xdc\xfd\x39\xba\xab\xe5\x15\x83\x5b\x4d\x66\xeb\xa8\x8a\x4f\xbb\xb6\xfa\xdc\x38\x67\xc6\xcd\x8b\x17\x69\x72\x95\x24\x37\xa1\x6e\x10\xe3\x1d\x5a\xdc\x84\xbd\x44\x85\x6b\x44\x88\x8d\xd8\xae\xd5\x66\x06\x45\x1b\x49\x31\x1a\xea\xd2\x60\x87\xfb\x66\x5c\x38\x59\x5c\xa8\xec\x93\x05\x7f\x8c\x92\xe3\x98\x19\x46\xfc\x1e\x23\xaf\x75\x87\x38\x9f\x62\x9f\x02\x7d\xc6\xca\xf7\x1a\xcb\x4f\xf9\x71\xad\xdf\x34\x7e\x74\xb5\x86\x7b\x30\xfa\x8a\x27\x8d\xce\x47\x1d\x79\xbf\x97\xe5\x96\x9a\x2e\x3d\xae\x96\x8d\x07\xe5\xa9\x99\x33\xb1\x60\x96\x9d\xad\x21\x7e\x2b\x64\x18\xee\xc2\x0a\xbd\x45\x46\x1a\x2a\x97\x3a\x8a\x59\xb7\xe1\xed\xb4\x00\x50\x62\xe0\x1f\xe7\x93\xb2\xd9\x8c\xee\x3e\x37\x05\x54\x78\xe5\x0e\x23\x49\x03\x51\x35\xf0\xef\x2a\xde\x55\x9b\x8e\xf4\x8a\x95\x04\xdd\xe8\x47\x12\xce\x91\xbf\x3b\xbf\xeb\xb8\x79\x20\xe7\xe3\xa4\x23\xf3\x48\x0c\x9e\x1b\xa7\xee\xf5\x77\x38\x16\x1c\xc9\x2d\x46\x56\xfa\xea\xcd\x1c\xd7\x10\x34\x27\x47\xf1\x71\x21\xe9\x4e\xcc\xd3\x34\x6d\x8d\xb8\x2f\x1e\x24\x2e\xd0\x2b\x97\x2f\x51\x3a\x9b\x53\x26\x7e\x1f\x35\x7a\x4e\xc7\x25\x4d\x39\x7b\x64\xc5\x2f\x8d\x10\x05\x68\x2d\xe2\xa2\xc2\x24\xc8\x09\xde\x02\x57\xe9\x15\x8a\x04\x1c\xec\x15\x45\x35\xee\x85\xb3\x07\xed\x18\x95\x53\x29\x35\x1b\x60\x26\xa6\x6f\x8a\x98\x06\xff\x07\x00\x00\xff\xff\x01\x0c\x6d\xf7\x80\x0a\x00\x00")

func assetsTuned06DsTunedRhel8YamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTuned06DsTunedRhel8Yaml,
		"assets/tuned/06-ds-tuned-rhel8.yaml",
	)
}

func assetsTuned06DsTunedRhel8Yaml() (*asset, error) {
	bytes, err := assetsTuned06DsTunedRhel8YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/06-ds-tuned-rhel8.yaml", size: 2688, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTunedDefaultCrTunedYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4f\x6f\xdb\xc6\x13\xbd\xeb\x53\x0c\x94\xdf\xc1\xc6\x2f\xa4\x2c\x59\xb2\x63\x02\xec\x25\x0d\x90\x43\x8b\x04\x4d\xda\x4b\x51\x10\xeb\xe5\x50\x5c\x68\xff\x61\x67\x56\xb6\xd2\xf6\xbb\x17\x4b\x91\xb4\xad\xd8\x8e\x82\xba\x3a\x91\xdc\xd9\xf7\xe6\xcd\xdb\x19\xad\xf0\xea\x37\x0c\xa4\x9c\x2d\x80\xa3\xc5\x3a\x77\x1e\x2d\xb5\xaa\xe1\x5c\xb9\xd9\x76\x3e\xd9\x28\x5b\x17\xf0\x39\xad\x4d\x0c\xb2\xa8\x05\x8b\x62\x02\x60\x85\xc1\x02\x6a\x6c\x44\xd4\xdc\xbf\x93\x17\x12\x0b\x18\x21\x32\xa9\x23\x31\x86\xcc\xba\x1a\x33\x8e\x56\xd9\x75\xe6\x3c\x06\xc1\x2e\x4c\xc8\xa3\x4c\x48\x3e\xb8\x46\x69\x4c\x8f\x59\x0f\x3b\x1d\x21\xa6\x13\x00\x80\x8e\x14\xfe\xea\x9e\x01\x7e\x37\x42\xd9\x3f\xfa\x17\x8a\xc6\x88\xb0\x2b\x3f\x78\x56\x46\x7d\x41\xa0\x1d\x31\x1a\x82\x10\x6d\xe2\x83\x0f\x1e\xed\xa7\x04\x05\x27\x5e\x04\xb4\x3c\x10\x9e\xf6\x08\xca\x4a\x1d\x6b\x2c\xff\xf7\x67\x53\x6c\x55\xe0\x4a\xb6\x28\x37\xdd\x63\x14\x3a\x5b\x47\x24\x2e\xb8\x0d\x2e\xae\x5b\x1f\x39\xf3\x18\x1a\x17\x8c\xb0\x12\xff\x9e\x0c\x29\x11\x6a\x65\xe3\xed\x90\x95\xd8\xca\x4a\x0a\xd9\x62\xc5\x6d\x40\x6a\x9d\xae\xcb\x37\xf3\xab\xc5\x18\x6f\x91\x87\x58\xdb\x54\xd2\x59\xcb\x41\xc8\x4d\xd5\x0a\x6a\x49\x7d\xc1\x72\x7e\x3e\x3f\xbb\xbc\x8b\xa7\x1d\x49\xd6\xe3\x16\xe4\x5c\xf9\xed\x32\x57\xbe\x6a\x5c\xb8\x11\xa1\x2e\xe7\xfd\xda\x06\x83\x45\x9d\x7b\x55\x57\x46\xdc\x96\x3f\xf4\x40\x77\x1b\x2d\x72\xa3\x34\x63\xc8\x1f\x30\xa7\xe0\xf9\xd9\xf2\xcd\xea\xf2\xe2\x90\xc5\xa2\x5a\xb7\x79\xef\x75\xbe\x96\xbd\xa8\xf9\x5e\xd2\x71\xc1\x8b\xf2\x7c\x71\x79\xf1\xe6\xc8\xe8\xf3\xf2\x62\xb5\x3a\x3f\x48\xe4\xe2\x7b\x12\x79\x32\xf8\xd1\x44\x9e\x8c\x1e\x12\xb9\xe7\x43\x43\x83\x0d\x33\xda\xd1\xcc\xb8\x3a\x6a\x9c\xd9\xad\xc1\x4a\xba\x80\x33\x2f\x82\x30\xc8\x18\x68\xa6\x5c\xc5\xca\xa0\x8b\x5c\x2e\x17\x57\xcb\xab\x8b\xcb\xc5\xd5\xea\xd8\xcd\x46\xdc\x56\x01\x39\x28\xa4\x72\x7e\x36\x79\xb4\x3d\x32\xe9\x2c\x07\xa7\x33\xaf\x85\xc5\x97\x6c\x96\x1e\x18\x3a\xe0\x83\x4e\x19\xe9\x9f\x38\x9e\xaf\x60\x93\x86\x09\xec\xbf\x02\x21\xb3\xb2\x6b\x7a\x0d\x46\xdc\x26\xde\xc4\xa4\x66\x0e\xee\x9a\x6a\xd8\x38\x02\xfc\xac\xac\x32\x42\x83\x0f\x88\xc6\xb3\x72\x16\xd6\x41\xd8\xa8\x45\x50\xbc\x83\xc6\x05\x78\xfb\xf1\xd7\xec\xda\x45\x5b\x03\x0b\xda\x50\x31\xee\x3d\xe9\x5d\x2c\x60\x0e\x86\x50\xbe\x02\x38\x99\xc3\xff\x41\x69\xb7\x3e\xb1\xd2\x47\x3a\x3d\x7d\x0d\xd1\x2a\xa6\x02\xac\xb0\x8e\x50\x3a\x5b\xd3\xe9\xc3\x0e\x22\xd9\x62\x5d\x19\x65\xab\x7b\xcc\x95\x4d\x66\xec\x7f\x23\xe1\xe7\x16\x81\x1d\x0b\x0d\xc9\x6d\xe0\x16\xa1\xdb\x1c\x35\x06\xb8\x51\x5a\xa7\x6a\x92\xaa\x31\x80\x00\xa3\xd6\x41\x30\xd6\x69\x0c\x49\x24\x1a\x51\xa6\xdd\xc0\x80\xd6\xf1\x14\x44\x52\xd5\x46\x02\x8d\x44\xa0\xd5\x06\xf5\x0e\xd8\xc1\x35\x42\xc0\x6c\x80\xb8\x53\xbc\xf7\x71\x18\xc7\xa0\x08\x56\x5d\x8a\xaf\x41\xe5\x98\xc3\x59\xbe\x02\xf3\x94\xbe\x84\xa5\x9c\xad\xa4\x23\x4e\xf2\x56\x07\xea\x3e\xbd\x7d\xff\xee\xc7\xea\xc3\xe7\xf7\xef\x7e\x81\x1b\xb1\xc1\x2c\xfa\xfb\x5e\xe4\x5f\x79\xf7\xf1\x71\xcf\x6e\x5a\xb4\x7b\xab\x3a\x18\x88\x3e\x07\xf8\xc9\xdd\x60\xe8\x2a\xb6\x15\x3a\xa6\x32\x8e\x30\xca\xf8\xe0\xb6\x38\x72\x6a\xc1\x68\xe5\xae\xaf\xcd\x70\x72\xba\xa3\x30\x2c\xc9\xa0\x58\xc9\xe4\x43\xa2\xc9\x1f\xd3\x9b\xd0\xa2\x3f\xb4\x74\xd9\x6b\x7e\xbc\xc9\xd2\xdf\xd7\x4b\xf6\x56\xc2\xa3\xef\xec\xa9\x71\x62\xb2\xf4\x55\x23\x88\xd3\x86\xf2\xbc\x5f\x6d\x28\x57\xd6\xb1\x6a\x76\x79\x1a\x1b\x91\x30\x54\x37\x82\x65\x8b\x74\x37\xc0\xbe\x35\x3e\x32\xa4\x7f\xaf\xf2\xdd\x27\x70\xf6\xeb\x39\x92\x3d\x3b\x47\x1e\xe6\xf1\x44\x05\xb6\xa6\xd3\x66\x84\xaf\xa4\x8b\x96\xcb\xc5\xc5\x62\xbe\x5c\x3e\xe3\xd9\x7f\x22\xe8\x59\xf3\x3a\xda\xef\xcf\x3f\xa0\x74\xc6\xa0\xad\xf7\x97\xa0\xe1\x46\xf4\x6d\xa7\x7c\x50\x2e\x9d\xe1\x02\xe6\xfb\x86\x35\xc9\xf4\xfd\x28\xcc\x40\x8b\x6b\xd4\x05\x4c\x1f\xb9\xd9\xa1\x16\xc4\x4a\x12\x8a\x20\xdb\x69\x9f\x21\xef\x7c\x22\xf5\xae\x1e\xbe\xdc\x83\xbb\x0f\xd8\x15\x37\x38\x8d\xf9\x26\x5e\xa7\xee\x62\xa4\x84\x6a\x44\xba\xee\x4d\x8f\x8e\x57\xb6\x09\x62\x3a\x79\x52\xf4\x03\x13\xef\xb4\x2e\x5e\x58\xeb\x71\x45\x3f\xcc\xe2\xfc\x99\x2c\x8e\x29\xd0\xcb\x94\xe7\x30\xab\xe5\xd9\xe4\x9f\x00\x00\x00\xff\xff\x4a\xe0\xd1\x90\xd5\x0b\x00\x00")

func assetsTunedDefaultCrTunedYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTunedDefaultCrTunedYaml,
		"assets/tuned/default-cr-tuned.yaml",
	)
}

func assetsTunedDefaultCrTunedYaml() (*asset, error) {
	bytes, err := assetsTunedDefaultCrTunedYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tuned/default-cr-tuned.yaml", size: 3029, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/tuned/01-service-account.yaml":      assetsTuned01ServiceAccountYaml,
	"assets/tuned/02-cluster-role.yaml":         assetsTuned02ClusterRoleYaml,
	"assets/tuned/03-cluster-role-binding.yaml": assetsTuned03ClusterRoleBindingYaml,
	"assets/tuned/04-cm-tuned-profiles.yaml":    assetsTuned04CmTunedProfilesYaml,
	"assets/tuned/05-cm-tuned-recommend.yaml":   assetsTuned05CmTunedRecommendYaml,
	"assets/tuned/06-ds-tuned-rhel7.yaml":       assetsTuned06DsTunedRhel7Yaml,
	"assets/tuned/06-ds-tuned-rhel8.yaml":       assetsTuned06DsTunedRhel8Yaml,
	"assets/tuned/default-cr-tuned.yaml":        assetsTunedDefaultCrTunedYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"tuned": {nil, map[string]*bintree{
			"01-service-account.yaml":      {assetsTuned01ServiceAccountYaml, map[string]*bintree{}},
			"02-cluster-role.yaml":         {assetsTuned02ClusterRoleYaml, map[string]*bintree{}},
			"03-cluster-role-binding.yaml": {assetsTuned03ClusterRoleBindingYaml, map[string]*bintree{}},
			"04-cm-tuned-profiles.yaml":    {assetsTuned04CmTunedProfilesYaml, map[string]*bintree{}},
			"05-cm-tuned-recommend.yaml":   {assetsTuned05CmTunedRecommendYaml, map[string]*bintree{}},
			"06-ds-tuned-rhel7.yaml":       {assetsTuned06DsTunedRhel7Yaml, map[string]*bintree{}},
			"06-ds-tuned-rhel8.yaml":       {assetsTuned06DsTunedRhel8Yaml, map[string]*bintree{}},
			"default-cr-tuned.yaml":        {assetsTunedDefaultCrTunedYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
