[main]
summary=Openshift node optimized for deterministic performance at the cost of increased power consumption, focused on low latency network performance. Based on Tuned 2.11 and Cluster node tuning (oc 4.5)
include=openshift-node,cpu-partitioning

# Inheritance of base profiles legend:
# cpu-partitioning -> network-latency -> latency-performance
# https://github.com/redhat-performance/tuned/blob/master/profiles/latency-performance/tuned.conf
# https://github.com/redhat-performance/tuned/blob/master/profiles/network-latency/tuned.conf
# https://github.com/redhat-performance/tuned/blob/master/profiles/cpu-partitioning/tuned.conf

# All values are mapped with a comment where a parent profile contains them.
# Different values will override the original values in parent profiles.

[variables]
#> isolated_cores take a list of ranges; e.g. isolated_cores=2,4-7
{{if .IsolatedCpus}}
isolated_cores={{.IsolatedCpus}}
{{end}}

not_isolated_cores_expanded=${f:cpulist_invert:${isolated_cores_expanded}}

{{if .PerPodPowerManagement}}
[cpu]
enabled=false
{{else}}
[cpu]
#> latency-performance
#> (override)
force_latency=cstate.id:1|3
governor=performance
energy_perf_bias=performance
min_perf_pct=100
{{end}}

{{if .RealTimeHint}}
[service]
service.stalld=start,enable
{{else}}
[service]
service.stalld=stop,disable
{{end}}

[vm]
#> network-latency
transparent_hugepages=never

{{if not .GloballyDisableIrqLoadBalancing}}
[irqbalance]
# Disable the plugin entirely, which was enabled by the parent profile `cpu-partitioning`.
# It can be racy if TuneD restarts for whatever reason.
#> cpu-partitioning
enabled=false
{{end}}

[scheduler]
runtime=0
group.ksoftirqd=0:f:11:*:ksoftirqd.*
group.rcuc=0:f:11:*:rcuc.*
group.ktimers=0:f:11:*:ktimers.*
sched_migration_cost_ns=5000000
{{if not .GloballyDisableIrqLoadBalancing}}
default_irq_smp_affinity = ignore
{{end}}

[sysctl]
{{if .RealTimeHint}}
#> cpu-partitioning #RealTimeHint
kernel.hung_task_timeout_secs=600
#> cpu-partitioning #RealTimeHint
kernel.nmi_watchdog=0
#> RealTimeHint
kernel.sched_rt_runtime_us=-1
#> cpu-partitioning  #RealTimeHint
vm.stat_interval=10
{{end}}
# cpu-partitioning and RealTimeHint for RHEL disable it (= 0)
# OCP is too dynamic when partitioning and needs to evacuate
#> scheduled timers when starting a guaranteed workload (= 1)
kernel.timer_migration=1
#> network-latency
# TODO once rhbz#2120328 is solved: kernel.numa_balancing, net.core.busy_read and net.core.busy_poll do not exist on RT kernels
kernel.numa_balancing=0
net.core.busy_read=50
net.core.busy_poll=50
net.ipv4.tcp_fastopen=3

# If a workload mostly uses anonymous memory and it hits this limit, the entire
# working set is buffered for I/O, and any more write buffering would require
# swapping, so it's time to throttle writes until I/O can catch up.  Workloads
# that mostly use file mappings may be able to use even higher values.
#
# The generator of dirty data starts writeback at this percentage (system default
# is 20%)
#> latency-performance
vm.dirty_ratio=10

# Start background writeback (via writeback threads) at this percentage (system
# default is 10%)
#> latency-performance
vm.dirty_background_ratio=3

# The swappiness parameter controls the tendency of the kernel to move
# processes out of physical memory and onto the swap disk.
# 0 tells the kernel to avoid swapping processes out of physical memory
# for as long as possible
# 100 tells the kernel to aggressively swap processes out of physical memory
# and move them to swap cache
#> latency-performance
vm.swappiness=10

# also configured via a sysctl.d file
# placed here for documentation purposes and commented out due
# to a tuned logging bug complaining about duplicate sysctl:
#   https://issues.redhat.com/browse/RHEL-18972
#> rps configuration
# net.core.rps_default_mask=${not_isolated_cpumask}


[selinux]
#> Custom (atomic host)
avc_cache_threshold=8192

{{if .NetDevices}}
{{.NetDevices}}
{{end}}

[bootloader]
# set empty values to disable RHEL initrd setting in cpu-partitioning
initrd_remove_dir=
initrd_dst_img=
initrd_add_dir=

# overrides cpu-partitioning cmdline
cmdline_cpu_part=+nohz=on rcu_nocbs=${isolated_cores} tuned.non_isolcpus=${not_isolated_cpumask} systemd.cpu_affinity=${not_isolated_cores_expanded} intel_iommu=on iommu=pt

{{if .StaticIsolation}}
cmdline_isolation=+isolcpus=domain,managed_irq,${isolated_cores}
{{else}}
cmdline_isolation=+isolcpus=managed_irq,${isolated_cores}
{{end}}

{{if .RealTimeHint}}
cmdline_realtime=+nohz_full=${isolated_cores} tsc=reliable nosoftlockup nmi_watchdog=0 mce=off skew_tick=1 rcutree.kthread_prio=11
{{end}}

{{if .HighPowerConsumption}}
cmdline_power_performance=+processor.max_cstate=1 intel_idle.max_cstate=0
{{end}}

{{if and .HighPowerConsumption .RealTimeHint}}
cmdline_idle_poll=+idle=poll
{{end}}

{{if .DefaultHugepagesSize}}
cmdline_hugepages=+ default_hugepagesz={{.DefaultHugepagesSize}} {{end}} {{if .Hugepages}} {{.Hugepages}} {{end}}

{{if .AdditionalArgs}}
cmdline_additionalArg=+{{.AdditionalArgs}} 
{{end}}

{{if .PerPodPowerManagement}}
cmdline_pstate=+intel_pstate=passive
{{else if .HardwareTuning}}
cmdline_pstate=+intel_pstate=active
{{else if .RealTimeHint}}
cmdline_pstate=+intel_pstate=disable
{{end}}

[rtentsk]

{{ if .HardwareTuning }}
[sysfs]
# sets provided frequencies to isolated and reserved cpus
{{ range .IsolatedCpuList }}
/sys/devices/system/cpu/cpufreq/policy{{.}}/scaling_max_freq={{$.IsolatedCpuMaxFreq}}
{{- end -}}
{{ range .ReservedCpuList }}
/sys/devices/system/cpu/cpufreq/policy{{.}}/scaling_max_freq={{$.ReservedCpuMaxFreq}}
{{- end -}}
{{ end }}
