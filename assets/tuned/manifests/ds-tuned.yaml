apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: tuned
  namespace: openshift-cluster-node-tuning-operator
  labels:
    openshift-app: tuned
spec:
  selector:
    matchLabels:
      openshift-app: tuned
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 10%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        target.workload.openshift.io/management: '{"effect": "PreferredDuringScheduling"}'
      labels:
        openshift-app: tuned
    spec:
      serviceAccountName: tuned
      containers:
      - command: ["/usr/bin/cluster-node-tuning-operator","openshift-tuned","--in-cluster","-v=0"]
        resources:
          requests:
            cpu: 10m
            memory: 50Mi
        image: ${CLUSTER_NODE_TUNED_IMAGE}
        imagePullPolicy: IfNotPresent
        name: tuned
        securityContext:
          privileged: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /etc/modprobe.d
          name: etc-modprobe-d
          mountPropagation: HostToContainer
        - mountPath: /etc/sysconfig
          name: etc-sysconfig
          mountPropagation: HostToContainer
        - mountPath: /etc/kubernetes
          name: etc-kubernetes
          mountPropagation: HostToContainer
          readOnly: true
        - mountPath: /etc/sysctl.d
          name: etc-sysctl-d
          mountPropagation: HostToContainer
          readOnly: true
        - mountPath: /etc/sysctl.conf
          name: etc-sysctl-conf
          mountPropagation: HostToContainer
          readOnly: true
        - mountPath: /etc/systemd
          name: etc-systemd
          mountPropagation: HostToContainer
        - mountPath: /run
          name: run
          mountPropagation: HostToContainer
        - mountPath: /sys
          name: sys
          mountPropagation: HostToContainer
        - mountPath: /lib/modules
          name: lib-modules
          mountPropagation: HostToContainer
          readOnly: true
        - mountPath: /var/lib/kubelet
          name: var-lib-kubelet
          mountPropagation: HostToContainer
          readOnly: true
        - mountPath: /host
          name: host
          mountPropagation: HostToContainer
        env:
          - name: WATCH_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: OCP_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: RESYNC_PERIOD
            value: "600"
          - name: RELEASE_VERSION
            value: ""
          - name: CLUSTER_NODE_TUNED_IMAGE
            value: ${CLUSTER_NODE_TUNED_IMAGE}
      volumes:
      - hostPath:
          path: /etc/modprobe.d
          type: Directory
        name: etc-modprobe-d
      - hostPath:
          path: /etc/sysconfig
          type: Directory
        name: etc-sysconfig
      - hostPath:
          path: /etc/kubernetes
          type: Directory
        name: etc-kubernetes
      - hostPath:
          path: /etc/sysctl.d
          type: Directory
        name: etc-sysctl-d
      - hostPath:
          path: /etc/sysctl.conf
          type: File
        name: etc-sysctl-conf
      - hostPath:
          path: /etc/systemd
          type: Directory
        name: etc-systemd
      - hostPath:
          path: /run
          type: Directory
        name: run
      - hostPath:
          path: /sys
          type: Directory
        name: sys
      - hostPath:
          path: /lib/modules
          type: Directory
        name: lib-modules
      - hostPath:
          path: /var/lib/kubelet
          type: Directory
        name: var-lib-kubelet
      - name: host
        hostPath:
          path: /
          type: Directory
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: "system-node-critical"
      hostIPC: true
      # hostNetwork is needed for getting access to host's Network namespace (e.g. net.ipv[46].neigh.default.gc_thresh[1-3])
      hostNetwork: true
      hostPID: true
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      tolerations:
      # tolerate all taints so that tuned is always present on all nodes
      - operator: Exists
